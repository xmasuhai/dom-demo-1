{"version":3,"sources":["dom.js"],"names":["window","dom","create","tagName","container","document","createElement","innerHTML","trim","content","firstChild","after","node","node2","console","log","siblings","parentNode","insertBefore","nextSibling","before","append","parent","appendChild","wrap","remove","removeChild","empty","array","x","push","attr","name","value","arguments","length","setAttribute","getAttribute","text","string","innerText","textContent","html","style","Object","object","key","class","add","className","classList","has","contains","on","eventName","fn","addEventListener","off","removeEventListener"],"mappings":"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","file":"dom.1d0b6d56.js","sourceRoot":"..\\src","sourcesContent":["/* 实现的几个 DOM 接口\n** dom.create(`<div>hi</div>`) // 用于创建节点\n** dom.after(node, node2) // 用于向后追加兄弟节点\n// 原生的提供了一个兼容性不佳的实验性接口`ChildNode.after() MDN`\n** dom.before(node, node2) // 用于向前追加兄弟节点\n** dom.append(parent, child) // 用于创建子节点\n** dom.wrap(`<div></div>`) //  用于创建父节点\n*/\n// dom.create = function() {}\n\nwindow.dom = {\n    // create: function() {} // 可简化为\n    create(tagName /* 语义化 形参 */ ) {\n        // return document.createElement(tagName) // 不能创建带有结构的 HTML 元素`<div><span>1</span></div>`\n\n        // const container = document.createElement(\"div\")\n        const container = document.createElement(\"template\");\n        container.innerHTML = tagName.trim(); // 除去空格\n        // return container.children[0]\n        return container.content.firstChild;\n        /* 存在 不可识别元素(<td></td>)的 bug\n         ** <td</td>> 不能单独存在 只能放在<table></table> 里<tr></tr>或<tbody></tbody> 里，放在 div 里不符合 HTML 语法\n         ** 可以放任意元素，不出 bug 的标签是 <template></template>\n         ** <template></template> 是窜门用来容纳人以标签的\n         ** <template></template> 用template.content.firstChild拿到\n         */\n    },\n    after(node, node2) {\n        // 在后面插入节点，就相当于在此 node 后面的节点的前面插 // 必须调用父节点的 insertBefore() 方法\n        console.log(node.siblings); // null ?\n        node.parentNode.insertBefore(node2, node.nextSibling);\n        /* 判断 排除最后一个节点 没有下一个节点 null 也符合 */\n    },\n    before(node, node2) {\n        node.parentNode.insertBefore(node2, node);\n    },\n    append(parent, node) {\n        parent.appendChild(node);\n    },\n    wrap(node, parent) {\n        dom.before(node, parent); // 将要包裹的“父节点”先插到目标节点的前面\n        dom.append(parent, node); // 再把目标节点用 append 移至将要包裹的父节点的下面\n    },\n    remove(node) {\n        // node.remove() // IE 不支持 兼容性不好\n        node.parentNode.removeChild(node);\n        return node; // 仍然需要获取此节点的引用\n    },\n    empty(node) {\n        // 清空 node 里面的所有子元素\n        // node.innerHTML = ''\n        // const childNodes = node.childNodes 可以改写成以下的写法\n        /*\n         ** const {childNodes} = node // 解构赋值\n         */\n        const array = [];\n        /*\n         **    for (let i = 0; i < childNodes.length; i++) { // 不需要i++的循环就用 while 循环代替\n         **        console.log(childNodes)\n         **        console.log(childNodes.length)\n         **        dom.remove(childNodes[i]) // remove( nodes) 会实时改变 nodes 的长度每次减一 导致循环的长度不固定 出现 bug\n         **        array.push(childNodes[i])\n         **    }\n         */\n        //  不需要i++的循环就用 while 循环代替for 循环\n\n        /* 获取第一个子节点 并 push 进数组 */\n        let x = node.firstChild;\n        while (x) {\n            // 如果 x 存在\n            array.push(dom.remove(node.firstChild));\n            x = node.firstChild; // 第一个子节点已经移除 原先第二节点就变为现在的第一个节点\n        }\n        return array; // 仍然需要获取此节点的引用\n    },\n    /* 改 用于读写属性 */\n    /* 用判断 arguments 的个数来重载函数 */\n    /* 重载\n     ** 有三个形参时，就是设置；\n     ** 第二个形参时，就是读取\n     */\n    attr(node, name, value) {\n        // 组合\n        if (arguments.length === 3) {\n            node.setAttribute(name, value); // 原生DOM setAttribute(name, value)\n        } else if (arguments.length === 2) {\n            return node.getAttribute(name); // 原生DOM getAttribute(name) 并返回值\n        }\n    },\n    /* 用于读/写文本内容 */\n    /* 重载\n     ** 有两个形参时，就是设置；\n     ** 第一个形参时，就是读取\n     */\n    text(node, string) {\n        // 设计模式 之 适配\n        // console.log('innerText' in node) //true\n        if (arguments.length === 2) {\n            /* 写 */\n            if (\"innerText\" in node) {\n                node.innerText = string; // IE // 会将节点原本的所有内容，包括标签全部改变\n            } else {\n                node.textContent = string; // Chrome/ Firefox // 会将节点原本的所有内容，包括标签全部改变\n            }\n        } else if (arguments.length === 1) {\n            /* 读 */\n            if (\"innerText\" in node) {\n                return node.innerText; // IE // 会将节点原本的所有内容，包括标签全部改变\n            } else {\n                return node.textContent; // Chrome/ Firefox // 会将节点原本的所有内容，包括标签全部改变\n            }\n        }\n    },\n    /* 用于读/写HTML内容 */\n    html(node, string) {\n        if (arguments.length === 2) {\n            node.innerHTML = string;\n        } else if (arguments.length === 1) {\n            return node.innerHTML;\n        }\n    },\n    /* 用于修改style */\n    /* 重载\n     ** 第二个形参是对象时，就是设置；dom.style(div, {color: \"red\"})\n     ** 有三个形参时，也是设置；dom.style(div, 'color', 'red')\n     ** 第二个形参是字符串时，就是读取 dom.style(div, 'color')\n     */\n    style(node, name, value) {\n        if (arguments.length === 3) {\n            // dom.style(div, 'color: \"red\"')\n            node.style[name] = value;\n        } else if (arguments.length === 2) {\n            if (typeof name === \"string\") {\n                // 读取 dom.style(div, 'color')\n                return node.style[name];\n            } else if (name instanceof Object /* true */ ) {\n                // dom.style(div, {color:'red'})\n                const object = name;\n                for (let key in object) {\n                    // 遍历读取所有对应的key\n                    // key: border | color | ···\n                    // node.style.border = ...\n                    // node.style.color = ...\n                    // 调用属性值 []方法 读取的时变量;点方法 读取的是字符串\n                    // node.style.key; // 字符串\n                    node.style[key] = object[key];\n                }\n            }\n        }\n    },\n    class: {\n        /* 用于添加class */\n        add(node, className) {\n            node.classList.add(className)\n        },\n        /* 用于删除class */\n        remove(node, className) {\n            node.classList.remove(className)\n        },\n        has(node, className) {\n            return node.classList.contains(className)\n        }\n    },\n    on(node, eventName, fn) {\n        node.addEventListener(eventName, fn)\n    },\n    off(node, eventName, fn) {\n        console.log('点击取消事件')\n        node.removeEventListener(eventName, fn)\n    }\n};"]}